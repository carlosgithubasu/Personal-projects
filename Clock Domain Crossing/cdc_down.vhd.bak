library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
 
entity cdc_down is
    generic(
        DATA_WIDTH : integer := 8
    );
    Port ( 
        in_rst : in std_logic;
        in_clk_A : in std_logic;
        in_clk_B : in std_logic;
        in_data_A_vld : in std_logic;
        in_data_A : in std_logic_vector(DATA_WIDTH - 1 downto 0);
        out_data_B : out std_logic_vector(DATA_WIDTH - 1 downto 0);
        out_data_B_vld : out std_logic
 
    );
end cdc_down;
 
architecture Behavioral of cdc_down is
 
    signal r_data_A : std_logic_vector(DATA_WIDTH - 1 downto 0) := (others => '0');
    signal r_data_B : std_logic_vector(DATA_WIDTH - 1 downto 0) := (others => '0');
    signal r_handshake_A : std_logic := '0';
    signal r_handshake_B : std_logic := '0';
 
begin
 
    out_data_B <= r_data_B;
    out_data_B_vld <= r_handshake_B;
 
    process(in_clk_A, in_rst)
    begin
        if in_rst = '1' then
            r_handshake_A <= '0';	
            r_data_A <= (others => '0');
 
        elsif rising_edge(in_clk_A) then
            if in_data_A_vld = '1' and r_handshake_A = '0' then
				r_data_A <= in_data_A;
				r_handshake_A <= '1';
			else
			    if r_handshake_B = '1' then
				    r_handshake_A <= '0';
			     end if;
		    end if;
		end if;
    end process;
 
    process(in_clk_B, in_rst)
    begin
        if in_rst = '1' then
            r_handshake_B <= '0';
            r_data_B <= (others => '0');
        elsif rising_edge(in_clk_B) then
            if r_handshake_B = '0' and r_handshake_A = '1'  then
                r_handshake_B <= '1';
                r_data_B <= r_data_A;			
            elsif r_handshake_A = '0' then
                r_handshake_B <= '0';		
            end if;
        end if;    
    end process;
 
end Behavioral;