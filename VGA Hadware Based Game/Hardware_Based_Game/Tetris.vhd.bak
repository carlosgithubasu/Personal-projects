LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.std_logic_arith.ALL;
USE IEEE.std_logic_unsigned.ALL;
USE WORK.VGA_LIBRERIA.ALL;


ENTITY Tetris IS

	PORT (
		CLK_50MHz, RST  : IN STD_LOGIC; 
		HSYNC, VSYNC    : OUT STD_LOGIC; 
		R, G, B         : OUT STD_LOGIC_VECTOR(3 DOWNTO 0); 
		IZQ, DER        : IN STD_LOGIC
	);

	END Tetris;

	
ARCHITECTURE BEHAVIORAL OF Tetris IS

	COMPONENT VGA_SYNC     
		PORT (
		CLK_25Mhz    : IN STD_LOGIC;
		RST	  : IN STD_LOGIC;
		H_SYNC, V_SYNC, VIDEO_ON  : OUT STD_LOGIC;
		HCOUNT, VCOUNT            : OUT STD_LOGIC_VECTOR(9 DOWNTO 0)
	
	);
	END COMPONENT;
	
	COMPONENT FQDIVIDER 
		PORT (
			CLK_IN, RST  : IN STD_LOGIC; 
			CLK_OUT      : OUT STD_LOGIC 
		);
	END COMPONENT;
	
	SIGNAL HCOUNT : STD_LOGIC_VECTOR (9 DOWNTO 0) := "0000000000";
	SIGNAL VCOUNT : STD_LOGIC_VECTOR(9 DOWNTO 0)  := "0000000000";
	SIGNAL V_SYNC : STD_LOGIC := '0'; 
	SIGNAL H_SYNC : STD_LOGIC := '0'; 
	SIGNAL VIDEO_ON : STD_LOGIC := '0';
	
	
	signal   random_piece         : piece_type;
	signal   rnd_count_r          : integer range 0 to 6;
	
	
	SIGNAL CLK_25MHZ : STD_LOGIC := '0';
	SIGNAL R_ST : STD_LOGIC := '0'; 
	

	TYPE TETRIS IS(DRAWALLS,SELECTFIGURE,DROPFIGURE,TOUCH,SAVEINRAM,GAMEOVER);
	
	SIGNAL TETRIS_MACHINE : TETRIS := DRAWBOARDs;
	
	
	
	
	
	
	
	
	BEGIN

         CLK : FQDIVIDER
			PORT MAP(CLK_50MHZ, R_ST, CLK_25MHZ);
			
			SYNC : VGA_SYNC
			PORT MAP(CLK_25MHZ, RST, H_SYNC, V_SYNC, VIDEO_ON, HCOUNT, VCOUNT); 
 

			
			VSYNC <= V_SYNC;
			HSYNC <= H_SYNC;




MAQUINADEESTADOS: PROCESS(CLK_25MHZ,RST)
	
		   VARIABLE COUNTER : INTEGER := 0;

		   BEGIN
			
			
			
					
		   IF RISING_EDGE(CLK_25MHZ) THEN    --Pinta muros 
			
				IF VIDEO_ON = '1' THEN
			 
					CASE TETRIS IS 
						
				
						WHEN DRAWALLS =>
									
										IF ( HCOUNT > 140 AND HCOUNT < 180 ) AND ( VCOUNT > 0 AND VCOUNT < 480 ) THEN
						 
											R <= (OTHERS => '1');
											G <= (OTHERS => '0');
											B <= (OTHERS => '1');
											
										ELSIF ((HCOUNT > 460 AND HCOUNT < 500) AND (VCOUNT > 0 AND VCOUNT < 480 )) THEN
											R <= (OTHERS => '1');
											G <= (OTHERS => '1');
											B <= (OTHERS => '0');
										
										ELSE 
										
											R <= (OTHERS => '0');
											G <= (OTHERS => '0');
											B <= (OTHERS => '0');
										
										
										END IF;
										
				
				WHEN SELECTFIGURE =>   
						
						
											TETRIS <=DRAWFIGURE;
				  
				WHEN DRAWFIGURE =>  CASE FIGURE IS 
												WHEN '4' => IF(HCOUNT >  HBEGIN) AND (HCOUNT < HEND ) AND VCOUNT > V_BEGIN AND VCOUNT < VEND) THEN
												
														
																R <= (OTHERS => '1');
																G <= (OTHERS => '0');
																B <= (OTHERS => '1');
																
																ELSE
																
																R <= (OTHERS => '0');
																G <= (OTHERS => '0');
																B <= (OTHERS => '0');
																
																END IF;
															TETRIS<= SAVEFIGURE;    
			
			WHEN SAVEFIGURE =>    RAM(contador) <=  
 
 
		ELSE
 
			R <= (OTHERS => '0');
			G <= (OTHERS => '0');
			B <= (OTHERS => '0');
 
		END IF;
 
	END IF;

END PROCESS;




rand_shape : process(RST, CLK_25MHZ)
	begin
		if (RST_N = '0') then
			rnd_count_r <= 0;
		elsif (rising_edge(CLOCK)) then
			if(TIME_10MS = '1' or BUTTON_RIGHT = '1' or BUTTON_LEFT = '1' or BUTTON_ROTATE = '1') then
				if(rnd_count_r /= rnd_count_r'high-1) then
					rnd_count_r <= rnd_count_r + 1;
				else
					rnd_count_r <= 0;
				end if;
			end if;			
		end if;
	end process;
	

	with rnd_count_r select random_piece <= 
		PIECE_T when 0,
		PIECE_SQUARE when 1,
		PIECE_STICK when 2,
		PIECE_L when 3,
		PIECE_LR when 4,
		PIECE_DOG_L when 5,
		PIECE_DOG_R when 6;


--
--
--
--
--
--
--PROCESS(CLK_25MHZ, LIMIT,F1_VBEGIN,F1_VEND)
--VARIABLE COUNTER : INTEGER := 0;
--BEGIN
--
--
--IF RISING_EDGE(CLK_25MHZ) THEN
--
--				IF COUNTER = 12500000 THEN 
--					COUNTER := 0; 
--				 
--					IF LIMIT = 450 THEN
--						LIMIT <=30;
--						F1_VBEGIN <= 0;
--						F1_VEND <= 30;
--
--					ELSE
--						F1_VBEGIN <= F1_VBEGIN + 10;
--						F1_VEND <= F1_VEND + 10;
--						LIMIT <= LIMIT + 10;
--					END IF;
--							
--				ELSE 				 
--					COUNTER := COUNTER + 1;
--					END IF;
--					
--END IF;
--	
--END PROCESS;
--
--
--PROCESS(CLK_25MHZ,F1_HBEGIN,F1_HEND)
-- VARIABLE CONTADOR : INTEGER :=0;
--BEGIN
--
--IF RISING_EDGE(CLK_25MHZ) THEN
--  IF CONTADOR = 4500000 THEN
--  CONTADOR :=0;
--		IF IZQ ='0' THEN
--         F1_HBEGIN <= F1_HBEGIN - 10;
--			
--			F1_HEND <= F1_HEND - 10;
--			
--	   ELSIF DER = '0' THEN 
--		   
--			 F1_HBEGIN <= F1_HBEGIN + 10;
--			
--			 F1_HEND <= F1_HEND + 10;
--	   END IF;
--		
--		ELSE CONTADOR := CONTADOR +1;
--   END IF;
--	END IF;
--	END PROCESS;
--		   
--			
--
--
--
END BEHAVIORAL;